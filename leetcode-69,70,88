class Solution {
/*
69. x的平方根
给你一个非负整数 x ，计算并返回 x 的 算术平方根 。
由于返回类型是整数，结果只保留 整数部分 ，小数部分将被 舍去 。
注意：不允许使用任何内置指数函数和算符，例如 pow(x, 0.5) 或者 x ** 0.5 。
*/
  public int mySqrt(int x) {
    if(x == 0) {
      return 0;
    }
    int ans = (int)Math.exp(0.5 * Math.log(x));
    return (long) (ans + 1) * (ans + 1) <= x ? ans + 1 : ans;
  }
/*
70. 滚动数组
假设你正在爬楼梯。需要 n 阶你才能到达楼顶。
每次你可以爬 1 或 2 个台阶。你有多少种不同的方法可以爬到楼顶呢？
*/
  public int climbStairs(int n) {
    int l = 0, r = 0, q = 1;
    for(int i = 1; i <= n; i++) {
      l = r;
      r = q;
      q = l + r;
    }
    return q;
  }
/*
88. 合并两个有序数组
给你两个按 非递减顺序 排列的整数数组 nums1 和 nums2，另有两个整数 m 和 n ，分别表示 nums1 和 nums2 中的元素数目。
请你 合并 nums2 到 nums1 中，使合并后的数组同样按 非递减顺序 排列。
注意：最终，合并后数组不应由函数返回，而是存储在数组 nums1 中。为了应对这种情况，nums1 的初始长度为 m + n，其中前 m 个元素表示应合并的元素，后 n 个元素为 0 ，应忽略。nums2 的长度为 n 。
*/
//这是解法1，使用的是双指针的方法
  public void merge1(int[] nums1, int m, int[] nums2, int n) { 
    int p1 = 0;
    int p2 = 0;
    int[] sorted = new int[n + m];
    int cur;
    while(p1 < m || p2 < n) {
      if(p1 == m) {
        cur = nums2[p2++];
      } else if (p2 == n) {
        cur = nums1[p1++];
      } else if(nums1[p1] < nums2[p2]) {
        cur = nums1[p1++];
      } else {
        cur = nums2[p2++];
      }
      sorted[p1 + p2 - 1] = cur;
    }
    for(int i = 0; i != m + n; i++) {
      nums1[i] = sorted[i];
    }
  }
//这是解法2，使用的是逆向双指针的算法,它对方法1的空间复杂度进行了优化
  public void merge2(int[] nums1, int m, int[] nums2, int n) { 
    int p1 = m - 1;
    int p2 = n - 1;
    int tail = m + n - 1;
    int cur = 0;
    while(p1 >= 0 || p2 >= 0) {
      if(p1 == -1) {
        cur = nums2[p2--];
      } else if(p2 == -1) {
        cur = nums1[p1--];
      } else if(nums1[p1] > nums2[p2]) {
        cur = nums1[p1--];
      } else {
        cur = nums2[p2--];
      }
      nums1[tail--] = cur;
    }
  }
}
